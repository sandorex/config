LABEL name="arcam-fedora-everything" \
      summary="Image for fedora dev containers tailored for use with arcam" \
      maintainer="Sandorex <rzhw3h@gmail.com>"

ARG VERSION=40
FROM registry.fedoraproject.org/fedora-toolbox:$VERSION
ARG VERSION

# set locale properly
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# create the directory where init scripts reside
RUN mkdir /init.d

# improve DNF experience (also improves build time as fastestmirror is usually faster)
RUN echo "max_parallel_downloads=10" >> /etc/dnf/dnf.conf \
    && echo "defaultyes=True" >> /etc/dnf/dnf.conf \
    && echo "fastestmirror=True" >> /etc/dnf/dnf.conf \
    && echo "install_weak_deps=False" >> /etc/dnf/dnf.conf

# install rpmfusion
RUN dnf -y install "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-${VERSION}.noarch.rpm" \
    && dnf -y install "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-${VERSION}.noarch.rpm"

# copy all files in advance
COPY ./scripts /temp/scripts
COPY ./init /temp/init
COPY ./pkglist /temp/pkglist

# essential tools and editors
RUN dnf -y install $(</temp/pkglist/base-dnf) \
    && cp -n /temp/init/neovim.sh /init.d/90-neovim.sh

# # setup binstall for use in other images
# ENV CARGO_HOME=/usr/local/
# RUN curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
# ENV CARGO_HOME=

# --- OPTIONS --- #
ARG OPTIONS

# TODO extensions config etc?
# add code-server
# ARG OPT_CODE_SERVER=n
RUN if [[ "$OPTIONS" == *"code-server"* ]]; then /temp/scripts/opt_code_server.sh; fi

# TODO add zellij?
# add utilities
# ARG OPT_UTILS=n
RUN if [[ "$OPTIONS" == *"utils"* ]]; then /temp/scripts/opt_utils.sh; fi
# RUN <<EOF
# if [ "$OPT_UTILS" = "y" ]; then
#     echo "Installing utilities"
#     dnf -y install $(</temp/utils-dnf)
#     cp -n /temp/init/neovim.sh /init.d/90-neovim.sh
#     npm install -g $(</temp/utils-npm)
#     pip install $(</temp/utils-pip)
# fi
# EOF

# RUN if [ "$OPT_UTILS" = "y" ]; then \
#         echo "Installing utilities" \
#         && dnf -y install $(</temp/utils-dnf) \
#         && cp -n /temp/init/neovim.sh /init.d/90-neovim.sh \
#         && npm install -g $(</temp/utils-npm) \
#         && pip install $(</temp/utils-pip) \
#         ;else :; fi

# install rustup by default (10ish mb not counting the toolchain which can be volume cached)
# ARG OPT_RUSTUP=y
ENV RUSTUP_HOME=/opt/rustup
RUN if [[ "$OPTIONS" == *"rustup"* ]]; then /temp/scripts/opt_rustup.sh; fi
# RUN <<EOF
# if [ "$OPT_RUSTUP" = "y" ]; then
#     echo "Installing rustup"
#     mkdir -p $RUSTUP_HOME
#     cp -n /temp/init/neovim.sh /init.d/20-rustup.sh
# fi
# EOF

# install zig (~100mb)
# ARG OPT_ZIG=y
RUN if [[ "$OPTIONS" == *"zig"* ]]; then /temp/scripts/opt_zig.sh; fi
# RUN <<EOF
# if [ "$OPT_RUSTUP" = "y" ]; then
#     echo "Installing zig"
#     dnf -y install zig
# fi
# EOF

# install nix (quite large beware)
# ARG OPT_NIX=n
RUN if [[ "$OPTIONS" == *"nix"* ]]; then /temp/scripts/opt_nix.sh; fi
# RUN <<EOF
# if [ "$OPT_NIX" = "y" ]; then
#     echo "Installing Nix"
#     sh <(curl -L https://nixos.org/nix/install) --daemon
#     cp -n /temp/init/nix.sh /init.d/05-nix.sh
# fi
# EOF

# clean up only once as it allows caching things above
RUN <<EOF
rm -rf /temp
dnf clean all

if command -v npm &>/dev/null; then
    npm cache clean --force
fi

if command -v pip &>/dev/null; then
    pip cache purge
fi
EOF

# disable zsh newuser prompt thingy
RUN echo "zsh-newuser-install () {}" > /etc/zshenv

# copy dotfiles (intentionally last as some packages modify /etc/skel)
RUN echo 'Replacing /etc/skel with /dotfiles' \
    && rm -rf /etc/skel \
    && cp -r /dotfiles/ /etc/skel

COPY <<EOF /help.sh
#!/bin/sh

cat <<eof
Image made for use with arcam

The image has following options enabled: $OPTIONS

Download from github release:
    https://github.com/sandorex/arcam/releases/latest/download/arcam

Alternatively install it using cargo:
    \$ cargo install arcam

eof
EOF
RUN chmod +x /help.sh

ENTRYPOINT [ "/help.sh" ]

