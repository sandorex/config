# configurable fedora image for arcam
#
# seemingly overcomplicated but actually simplifies the containers that do not fit the whole
# inheritance paradigm
#
# configure using build-arg OPTIONS

LABEL name="arcam-fedora-everything" \
      summary="Configurable arcam container image for development" \
      maintainer="Sandorex <rzhw3h@gmail.com>"

ARG VERSION=40
FROM registry.fedoraproject.org/fedora-toolbox:$VERSION
ARG VERSION

# set locale properly
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# create the directory where init scripts reside
RUN mkdir /init.d

# improve DNF experience (also improves build time as fastestmirror is usually faster)
RUN echo "max_parallel_downloads=10" >> /etc/dnf/dnf.conf \
    && echo "defaultyes=True" >> /etc/dnf/dnf.conf \
    && echo "fastestmirror=True" >> /etc/dnf/dnf.conf \
    && echo "install_weak_deps=False" >> /etc/dnf/dnf.conf

# install rpmfusion
RUN dnf -y install "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-${VERSION}.noarch.rpm" \
    && dnf -y install "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-${VERSION}.noarch.rpm"

# copy all files in advance
COPY ./scripts /temp/scripts
COPY ./init /temp/init
COPY ./pkglist /temp/pkglist

# essential tools and editors
RUN dnf -y install $(</temp/pkglist/base-dnf) \
    && cp -n /temp/init/neovim.sh /init.d/90-neovim.sh

# --- OPTIONS --- #
ARG OPTIONS

# add utilities
RUN if [[ "$OPTIONS" == *"utils"* ]]; then /temp/scripts/opt_utils.sh; fi

# install rustup (very small)
ENV RUSTUP_HOME=/opt/rustup
RUN if [[ "$OPTIONS" == *"rustup"* ]]; then /temp/scripts/opt_rustup.sh; fi

# add code-server
RUN if [[ "$OPTIONS" == *"code-server"* ]]; then /temp/scripts/opt_code_server.sh; fi

# install zig
RUN if [[ "$OPTIONS" == *"zig"* ]]; then /temp/scripts/opt_zig.sh; fi

# install nix
RUN if [[ "$OPTIONS" == *"nix"* ]]; then /temp/scripts/opt_nix.sh; fi
# --- OPTIONS --- #

# clean up only once as it allows caching things above
RUN <<EOF
rm -rf /temp
dnf clean all

if command -v npm &>/dev/null; then
    npm cache clean --force
fi

if command -v pip &>/dev/null; then
    pip cache purge
fi
EOF

# disable zsh newuser prompt thingy
RUN echo "zsh-newuser-install () {}" > /etc/zshenv

# copy dotfiles (intentionally last as some packages modify /etc/skel)
RUN <<EOF
if [[ -d /dotfiles ]]; then
    echo 'Replacing /etc/skel with /dotfiles'
    rm -rf /etc/skel
    cp -r /dotfiles/ /etc/skel
else
    echo 'Dotfiles not found'
fi
EOF

COPY <<EOF /help.sh
#!/bin/sh

cat <<eof
Image made for use with arcam

The image has following options enabled: $OPTIONS

Download from github release:
    https://github.com/sandorex/arcam/releases/latest/download/arcam

Alternatively install it using cargo:
    \$ cargo install arcam

eof
EOF
RUN chmod +x /help.sh

ENTRYPOINT [ "/help.sh" ]

