# Vagrant VM based on fedora meant as a replacement for WSL, as a linux work environment inside
# windows without limitiations and problems that come with WSL

mem = ENV['VM_MEM'] || 8192
vcpu = ENV['VM_VCPU'] || 6

name = 'wvm-vagrant'

# useful for multiple instances, if needed
suffix = ENV['VM_SUFFIX'] || ''

require 'socket'
hostname = Socket.gethostname.downcase

config_install_script = <<-SCRIPT
# TODO this is a bug in the bin/util/link script, it does not create the parent
mkdir -p ~/.config

# scripts
/config/bin/install.sh

# shell agnostic stuff
/config/shell/install.sh

# other commonly used software
/config/git/install.sh
/config/inputrc/install.sh
/config/bash/install.sh
/config/zsh/install.sh
/config/nvim/install.sh
/config/tmux/install.sh
SCRIPT

# TODO
pkg_install_script = <<-SCRIPT
SCRIPT

Vagrant.configure('2') do |config|
    config.vm.box = 'generic/fedora37'

    config.vm.hostname = "wvm-#{hostname}#{suffix}"

    # vagrant machine name not the virtual machine name!
    config.vm.define name

    config.vm.provider :virtualbox do |vb|
        vb.name = name + suffix
        vb.memory = mem.to_s
        vb.cpus = vcpu
        vb.linked_clone = true

        # use VBoxManage to have the Virtual Machine use the Host's DNS resolver
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    end

    config.vm.provider :vmware_desktop do |v|
        v.vmx['displayname'] = name
        v.vmx['memsize'] = mem.to_s
        v.vmx['numvcpus'] = vcpu.to_s
    end

    # sync the whole config directory
    config.vm.synced_folder '..', '/config', id: 'dotfiles'

    # allows usage of host ssh keys
    config.ssh.forward_agent = true

    # warn about destruction of the vm
    config.trigger.before :destroy do |trigger|
        trigger.warn = <<-STR

=== WARNING ===
This VM is meant as replacement for WSL and is not supposed to be destroyed unless broken'

        STR
    end

    # run the config setup script
    config.vm.provision :shell,
        name: 'Dotfiles installation',
        env: {
            'GIT_USERNAME' => `git config user.name`.chomp,
            'GIT_EMAIL' => `git config user.email`.chomp,
        },
        privileged: false,
        inline: config_install_script

    config.vm.post_up_message = "The vm is ready to go, hostname set to '#{config.vm.hostname}'"
end

# vim: ft=ruby ff=unix

