#!/usr/bin/env bash
#
# audio-sink-switcher - script that sets/toggles headphones or speakers
#
# the script works on piperwire, written for debian 12
#
# depends on pactl, optionally on notify-send

set -e

# get these using `pactl list sinks` in ports section
HEADPHONES='analog-output-headphones'
SPEAKERS='analog-output-lineout'

# get this using `pactl get-default-sink`
SINK='alsa_output.pci-0000_09_00.6.analog-stereo'

set-sink() { pactl set-default-sink "$1"; }
set-port() { pactl set-sink-port 0 "$1"; }

POSITIONAL_ARGS=()

while [ $# -gt 0 ]; do
    case $1 in
        --notify)
            NOTIFY=1
            shift
            ;;
        -*)
            echo "Unknown option $1"
            exit 1
            ;;
        *)
            # save positional arg
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done

# restore positional parameters
set -- "${POSITIONAL_ARGS[@]}"

notification() {
    if [[ -n "$NOTIFY" ]]; then
        # allow it to fail if not installed, redirect supresses error msg
        notify-send -t 1000 -u low -i headphones "$1" "$2" &>/dev/null || true
    fi
}

active_sink="$(pactl get-default-sink)"

# gets active port for current sink, should not print anything if sink is invalid
active_port="$(pactl list sinks | awk "BEGIN { found = 0 } /Name: $active_sink/ { found = 1 } /.*Active Port: .*/ && found { print \$3; exit }")"

# explicitly sets output so change the sink if not correct
case "$1" in
    h|headphones)
        [[ "$active_sink" != "$SINK" ]] && set-sink "$SINK"
        set-port "$HEADPHONES"
        notification 'audio-switcher' "Switched to headphones"
        ;;
    s|speakers)
        [[ "$active_sink" != "$SINK" ]] && set-sink "$SINK"
        set-port "$SPEAKERS"
        notification 'audio-switcher' "Switched to speakers"
        ;;
    t|toggle|'') # empty argument defaults to toggle as well
        # if active sink is not the correct one just give up
        if [[ "$active_sink" != "$SINK" ]]; then
            echo "Unknown sink is selected, quitting.."
            exit 1
        fi

        # toggle between speakers and headphones
        if [[ "$active_port" == "$HEADPHONES" ]]; then
            set-port "$SPEAKERS"
            notification 'audio-switcher' "Switched to speakers"
        elif [[ "$active_port" == "$SPEAKERS" ]]; then
            set-port "$HEADPHONES"
            notification 'audio-switcher' "Switched to headphones"
        else
            set-port "$SPEAKERS"
            echo "Unknown port was used '$active_port', switching to speakers"
            notification 'audio-switcher' "Switched to speakers"
        fi
        ;;
    *)
        echo "Invalid argument '$1'"
        exit 1
        ;;
    esac

