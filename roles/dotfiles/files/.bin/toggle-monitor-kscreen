#!/usr/bin/env python3
# toggles the second monitor off / on using kscreen-doctor

import subprocess
import click
import json
import sys

from typing import Any, Optional

def get_output(output) -> Optional[Any]:
    result = subprocess.run(["kscreen-doctor", "--json"], capture_output=True, text=True)
    result.check_returncode()

    stdout_json = json.loads(result.stdout)
    for monitor in stdout_json["outputs"]:
        if monitor["name"] == output:
            return monitor

    return None

def get_output_state(output) -> Optional[bool]:
    """Returns if monitor is already enabled or not, if not connected then None"""
    output_info = get_output(output)

    # either the output is not found or its not connected
    if output_info is None or not output_info["connected"]:
        return None

    return output_info["enabled"]

def set_output_state(output, state):
    """Sets output state regardless of the current state beware!"""
    state_str = "enable" if state else "disable"
    subprocess.check_call(["kscreen-doctor", "output.{}.{}".format(output, state_str)])

@click.command()
@click.argument("output")
@click.argument("state", required=False, type=bool)
def main(output, state):
    """
    Sets monitor state using kscreen-doctor, if state is not passed then toggles it

    To see output names run `kscreen-doctor -o`
    """
    current_state = get_output_state(output)
    if current_state is None:
        print("Invalid or unconnected output")
        sys.exit(1)

    if state is None:
        set_output_state(output, not current_state)
    else:
        # to prevent setting current state as that freezes the desktop for a second
        if current_state != state:
            set_output_state(output, state)

if __name__ == "__main__":
    main()

