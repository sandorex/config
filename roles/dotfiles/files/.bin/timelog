#!/usr/bin/env python3

import click
import os
import glob

from datetime import datetime, timedelta
from typing import List, Optional, Union

TIMELOG_DIR = os.path.join(os.environ.get("HOME"), ".timelog")

os.makedirs(TIMELOG_DIR, exist_ok=True)

TIMELOG_EXT = ".txt"
TIMELOG_FILE = os.path.join(TIMELOG_DIR, datetime.now().strftime("%Y%m%d") + TIMELOG_EXT)

def parse_log_time(line: str) -> datetime:
    return datetime.fromisoformat(line.split(" ")[0])

def remove_timestamp(line: str) -> str:
    return " ".join(line.split(" ")[1:])

def get_last_timelog_time() -> Optional[datetime]:
    try:
        with open(TIMELOG_FILE, "r") as fd:
            last_log = fd.readlines()[-1]
    except (FileNotFoundError, IndexError):
        return None

    # fail if only whitespace
    if not last_log.strip():
        return None

    return parse_log_time(last_log)

def add_timelog_line(time: datetime, text: str) -> str:
    with open(TIMELOG_FILE, "a+") as fd:
        fd.write(
            time.replace(microsecond=0).isoformat() + " " + text + "\n"
        )

def humanize_time(d: Union[datetime, timedelta]) -> str:
    if isinstance(d, datetime):
        return f"{d.hour}h {d.minute}m {d.second}s"
    elif isinstance(d, timedelta):
        # convert timedelta to datetime
        dt = datetime(2000, 1, 1) + d
        return humanize_time(dt)
    else:
        raise TypeError("Invalid type passed to humanize_time")

def list_timelog(file=TIMELOG_FILE):
    with open(file, "r") as fd:
        data = fd.readlines()

    start_time = None
    last_time = None
    for line in data:
        if not line.strip():
            continue

        line = line.replace("\n", "")

        time = parse_log_time(line)
        line_no_time = remove_timestamp(line)

        if last_time is None:
            last_time = time
            start_time = time

            print(line_no_time + ": Beginning of timelog")
            continue

        print(line_no_time + ": " + humanize_time(time - last_time))

        last_time = time

    print("\nTOTAL: " + humanize_time(last_time - start_time))

@click.command()
@click.option("--edit", is_flag=True, help="Edit today's timelog file with $EDITOR")
@click.option("--list", "_list", is_flag=True, help="List last three days of logs")
@click.option("--new", "new", is_flag=True, help="Creates new fresh log (old one is renamed)")
@click.argument("text", nargs=-1)
def main(text: List[str], edit: bool, _list: bool, new: bool):
    """
    Simple time tracking system
    """

    if new:
        print("Resetting log")
        os.rename(TIMELOG_FILE, TIMELOG_FILE.removesuffix(TIMELOG_EXT) + datetime.now().strftime("T%H%M%S") + TIMELOG_EXT)
        return

    # edit the logfile
    if edit:
        click.edit(filename=TIMELOG_FILE)
        return

    # show all todays logs
    if _list:
        for file in glob.glob(TIMELOG_FILE.removesuffix(TIMELOG_EXT) + "*" + TIMELOG_EXT):
            print("Timelog {}:".format(os.path.basename(file).removesuffix(TIMELOG_EXT)))
            list_timelog(file)
            print()
            print()
        return

    current_time = datetime.now()
    if last_log_time := get_last_timelog_time():
        time_delta = datetime(2000, 1, 1) + (current_time - last_log_time)
        print("Time since last log: {}h {}m {}s".format(time_delta.hour, time_delta.minute, time_delta.second))

    if text:
        add_timelog_line(current_time, " ".join(text).replace("\n", "@"))
        print("Log updated")

if __name__ == "__main__":
    main()

