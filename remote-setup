#!/usr/bin/env bash
#
# https://github.com/sandorex/config
# automatically copies dotfiles to remote host and opens a shell, made to simplify running
# playbooks on remote machines

set -e

cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1

if [[ -z "$1" ]]; then
    cat <<EOF
Usage: $0 <user@host>

Connects to remote device clones this repository (dirty) and starts a shell

EOF
    exit 1
fi

ip="$1"
shift

# transfer key if needed
./scripts/setup-ssh-key "$ip"

rm -f archive.tar

# TODO experiment with piping tar output to the ssh command
# archive repository everything but the tar itself and venv
tar -cf archive.tar --exclude='venv/*'      \
                    --exclude='*.tar'       \
                    --exclude='ssh_key'     \
                    --exclude='ssh_key.pub' \
                    ./* ./.*

echo "$(tput bold):: Transfering dotfiles from $(uname -n) to target ($ip)$(tput sgr0)"

# the host is unknown and i just dont want to deal with this
SSH_FLAGS=(
    # quiet
    -q

    # ignore changed host
    -o "StrictHostKeyChecking=no"

    # do not save host
    -o "UserKnownHostsFile=/dev/null"

    # do not use password
    -o "PasswordAuthentication=no"
    -o "ChallengeResponseAuthentication=no"

    # use local key
    -i "ssh_key"
)

# transfer archive to home of user
scp "${SSH_FLAGS[@]}" archive.tar scp://"$ip"/

rm -f archive.tar

ssh "${SSH_FLAGS[@]}" "$ip" -t 'mkdir -p .dotfiles \
    && tar -C .dotfiles -xf archive.tar \
    && rm -f archive.tar \
    && cd .dotfiles \
    && printf "$(tput bold)\n%s\n%s\n%s$(tput sgr0)\n\n%s\n\n" \
        "Options:" \
        "- For automated setup use ./auto-setup" \
        "- For manual setup use either the wrapper ./ansible-playbook or directly by sourcing ./scripts/activate" \
        "If you wish to restore git repository to last commited state run git reset --hard HEAD" \
    && $SHELL -i'

